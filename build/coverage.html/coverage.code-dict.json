{"/home/travis/build/npmtest/node-npmtest-browserify-css/test.js":"/* istanbul instrument in package npmtest_browserify_css */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-browserify-css/lib.npmtest_browserify_css.js":"/* istanbul instrument in package npmtest_browserify_css */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_browserify_css = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_browserify_css = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-browserify-css/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-browserify-css && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_browserify_css */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_browserify_css\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_browserify_css.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_browserify_css.rollup.js'] =\n            local.assetsDict['/assets.npmtest_browserify_css.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_browserify_css.__dirname + '/lib.npmtest_browserify_css.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-browserify-css/node_modules/browserify-css/index.js":"'use strict';\n\nvar _ = require('lodash');\nvar through = require('through2');\nvar fs = require('fs');\nvar path = require('path');\nvar cssTransform = require('./css-transform');\nvar CleanCSS = require('clean-css');\n\nvar defaults = {\n    autoInject: true,\n    autoInjectOptions: {\n        'verbose': true,\n        'insertAt': 'bottom'\n    },\n    minify: false,\n    inlineImages: false,\n    minifyOptions: {\n        // Check out a list of CSS minify options at [CleanCSS](https://github.com/jakubpawlowicz/clean-css#how-to-use-clean-css-programmatically).\n    },\n    rootDir: process.cwd(),\n    onFlush: function(options, done) {\n        done();\n    }\n};\n\ntry {\n    var pkg = JSON.parse(fs.readFileSync(process.cwd() + '/package.json') || '{}');\n    var options = pkg['browserify-css'] || defaults;\n    if (typeof options === 'string') {\n        var base = path.relative(__dirname, process.cwd());\n        options = require(path.join(base, options)) || defaults;\n    }\n} catch (err) {\n    options = defaults;\n}\noptions = _.defaults(options, defaults);\n\nmodule.exports = function(filename, opts) {\n    if ( ! /\\.css$/i.test(filename)) {\n        return through();\n    }\n\n    var buffer = '';\n\n    options = _.merge({}, options, opts);\n\n    return through(\n        function transform(chunk, enc, next) {\n            buffer += chunk;\n            next();\n        },\n        function flush(done) {\n            var that = this;\n\n            cssTransform.call(this, options, filename, function(data) {\n                var rootDir = path.resolve(process.cwd(), options.rootDir);\n                var relativePath = path.relative(rootDir, path.dirname(filename));\n                var href = path.join(relativePath, path.basename(filename));\n\n                if (options.minify) {\n                    data = new CleanCSS(options.minifyOptions).minify(data);\n                }\n\n                options.onFlush({\n                    filename: filename,\n                    data: data,\n                    rootDir: rootDir,\n                    relativePath: relativePath,\n                    href: href\n                }, function(moduleBody) {\n                    if (moduleBody === undefined) {\n                        if ( ! options.autoInject) {\n                            moduleBody = 'module.exports = ' + JSON.stringify(data) + ';';\n                        } else {\n                            if (options.autoInjectOptions.verbose) {\n                                moduleBody = 'var css = ' + JSON.stringify(data) + '; (require(' + JSON.stringify('browserify-css') + ').createStyle(css, { \"href\": ' + JSON.stringify(href) + ' }, { \"insertAt\": ' + JSON.stringify(options.autoInjectOptions.insertAt) + ' })); module.exports = css;';\n                            } else {\n                                moduleBody = 'var css = ' + JSON.stringify(data) + '; (require(' + JSON.stringify('browserify-css') + ').createStyle(css, {}, { \"insertAt\": ' + JSON.stringify(options.autoInjectOptions.insertAt) + ' })); module.exports = css;';\n                            }\n                        }\n                    }\n\n                    if (moduleBody) {\n                        that.push(moduleBody);\n                    }\n                    that.push(null);\n                    done();\n                });\n            });\n        }\n    );\n};\n","/home/travis/build/npmtest/node-npmtest-browserify-css/node_modules/browserify-css/css-transform.js":"'use strict';\n\nvar css = require('css');\nvar url = require('url');\nvar _ = require('lodash');\nvar fs = require('fs');\nvar path = require('path');\nvar concat = require('concat-stream');\nvar findNodeModules = require('find-node-modules');\nvar mime = require('mime');\n\nvar isExternalURL = function(path) {\n    return !! url.parse(path).protocol;\n};\n\nvar isRelativePath = function(path) {\n    return /^[^\\/]/.test(path);\n};\n\nvar isNodeModulePath = function(path) {\n    return /^node_modules/.test(path);\n};\n\n// Finds the the import path from parent node_modules.\n// @see {@link https://github.com/cheton/browserify-css/pull/21} for further information.\nvar findImportPathInNodeModules = function(baseDir, importPath) {\n    var parts = importPath.split('/');\n    var pathname = path.join(baseDir, importPath);\n\n    if (parts[0] === 'node_modules') {\n        // Gets all but the first element of array (i.e. node_modules).\n        importPath = _.rest(parts).join('/');\n    }\n\n    // Returns an array of all parent node_modules directories.\n    var dirs = findNodeModules({\n        cwd: baseDir,\n        relative: false\n    });\n\n    _.forEach(dirs, function(dir) {\n        if (fs.existsSync(path.join(dir, importPath))) {\n            pathname = path.join(dir, importPath);\n            return false; // Exits iteration by returning false.\n        }\n    });\n\n    return pathname;\n};\n\nvar cssTransform = function(options, filename, callback) {\n    var that = this;\n    var externalURLs = [];\n    var cssStream = concat({ encoding: 'string' }, function(data) {\n        var result = _.reduce(externalURLs, function(result, url) {\n            return result + '@import url(\"' + url + '\");\\n';\n        }, '');\n        result = result + data;\n        callback(result);\n    });\n\n    // If inlineImages is not an object but evaluates to true\n    // create object with default options\n    if(options.inlineImages && typeof options.inlineImages !== 'object') {\n        options.inlineImages = {\n            options: {\n                limit: 0\n            }\n        };\n    }\n\n    var rebaseUrls = options.rebaseUrls;\n    var inlineImages = options.inlineImages;\n    var rootDir = options.rootDir || '';\n    if (isRelativePath(rootDir)) {\n        rootDir = path.join(process.cwd(), rootDir);\n    }\n    var processRelativeUrl = function(relativeUrl) {\n        return relativeUrl;\n    };\n    if (_.isFunction(options.processRelativeUrl)) {\n        processRelativeUrl = options.processRelativeUrl;\n    }\n\n    var parseCSSFile = function(filename) {\n\n        var rebase = function(source) {\n            var absUrlRegEx = /^(\\/|data:)/;\n            var protocolRegEx = /[^\\:\\/]*:\\/\\/([^\\/])*/;\n            var urlRegEx = /url\\s*\\((?!#)\\s*(\\s*\"([^\"]*)\"|'([^']*)'|[^\\)]*\\s*)\\s*\\)/ig;\n            var r;\n            while ((r = urlRegEx.exec(source))) {\n                var url = r[2] || // url(\"path/to/foo.css\");\n                          r[3] || // url('path/to/foo.css');\n                          r[1] || // url(path/to/foo.css)\n                          '';\n                var quoteLen = ((r[2] || r[3]) && r[1]) ? 1 : 0;\n                var newUrl = url;\n\n                if ( ! url.match(absUrlRegEx) && ! url.match(protocolRegEx)) {\n                    // If both r[2] and r[3] are undefined, but r[1] is a string, it will be the case of url(path/to/foo.css).\n                    quoteLen = ((r[2] || r[3]) && r[1]) ? 1 : 0;\n\n                    var dirname = path.dirname(filename);\n                    var from = rootDir,\n                        to = path.resolve(dirname, url);\n\n                    newUrl = processRelativeUrl(path.relative(from, to));\n                    newUrl = newUrl.replace(/\\\\/g, '/'); // All URLs must use forward slashes\n\n                    source = source.substr(0, urlRegEx.lastIndex - url.length - quoteLen - 1) + newUrl + source.substr(urlRegEx.lastIndex - quoteLen - 1);\n                }\n\n                urlRegEx.lastIndex = urlRegEx.lastIndex + (newUrl.length - url.length);\n            }\n\n            return source;\n        };\n\n        var inline = function(source) {\n          \n            /**\n             * Given the contents for an image, returns a data URI string\n             * representing the data in that image.\n             * Adapted from:\n             * https://github.com/jbkirby/css-img-datauri-stream/blob/master/index.js\n             */\n            var getDataURI = function(imageFile,mimeType) {\n                // Convert it.\n                var ret = 'data:';\n                ret += mimeType;\n                ret += ';base64,';\n                ret += imageFile.toString('base64');\n                return ret;\n            };\n\n            var absUrlRegEx = /^(\\/|data:)/;\n            var protocolRegEx = /[^\\:\\/]*:\\/\\/([^\\/])*/;\n            var urlRegEx = /url\\s*\\((?!#)\\s*(\\s*\"([^\"]*)\"|'([^']*)'|[^\\)]*\\s*)\\s*\\)/ig;\n            var r;\n            while ((r = urlRegEx.exec(source))) {\n                var url = r[2] || // url(\"path/to/foo.css\");\n                          r[3] || // url('path/to/foo.css');\n                          r[1] || // url(path/to/foo.css)\n                          '';\n                var quoteLen = ((r[2] || r[3]) && r[1]) ? 1 : 0;\n                var newUrl = url;\n\n                if ( ! url.match(absUrlRegEx) && ! url.match(protocolRegEx)) {\n                    // If both r[2] and r[3] are undefined, but r[1] is a string, it will be the case of url(path/to/foo.png).\n                    quoteLen = ((r[2] || r[3]) && r[1]) ? 1 : 0;\n\n                    var dirname = path.dirname(filename);\n                    var localImagePath = path.resolve(dirname, url);\n\n                    // Read the file in and convert it if its an image\n                    var mimeType = mime.lookup(localImagePath);\n                    if (mimeType.startsWith('image')) {\n                        // If a size limit given skip if file larger than limit\n                        if(options.inlineImages.options.limit > 0) {\n                            var stat = fs.statSync(localImagePath);\n                            if(stat.size > options.inlineImages.options.limit) {\n                                continue;\n                            }\n                        }\n                        var image = fs.readFileSync(localImagePath);\n                        newUrl = getDataURI(image,mimeType);\n    \n                        source = source.substr(0, urlRegEx.lastIndex - url.length - quoteLen - 1) + newUrl + source.substr(urlRegEx.lastIndex - quoteLen - 1);\n                    }\n                }\n\n                urlRegEx.lastIndex = urlRegEx.lastIndex + (newUrl.length - url.length);\n            }\n\n            return source;\n        };\n        \n        var processRule = function (rule) {\n            if (inlineImages) {\n                _.each(rule.declarations, function(declaration) {\n                    declaration.value = inline(declaration.value);\n                });\n            }\n            \n            if (rebaseUrls) {\n                _.each(rule.declarations, function(declaration) {\n                    declaration.value = rebase(declaration.value);\n                });\n            }\n        };\n\n        var data = fs.readFileSync(filename, 'utf8');\n        if ( ! data) {\n            return;\n        }\n\n        var rules = css.parse(data).stylesheet.rules;\n\n        _.each(rules, function(rule) {\n            if (rule.type === 'import') {\n                //\n                // @import 'path/to/foo.css';\n                // @import \"path/to/foo.css\" screen, projection\n                // @import url(path/to/foo.css)\n                // @import url('path/to/foo.css') screen and (orientation:landscape)\n                // @import url(\"path/to/foo.css\") print;\n                // @import url(\"path/to/foo.css \") projection, tv;\n                // @import url(\"chrome://communicator/skin/\")\n                //\n                var importRegEx = /(url)?\\s*(('([^']*)'|\"([^\"]*)\")|\\(('([^']*)'|\"([^\"]*)\"|([^\\)]*))\\))\\s*;?/;\n                var result = importRegEx.exec(rule['import']);\n\n                                       // rule.import             result array\n                                       // =======================================\n                var url = result[7] || // url('path/to/foo.css')  result[7] = path/to/foo.css\n                          result[8] || // url(\"path/to/foo.css\")  result[8] = path/to/foo.css\n                          result[9] || // url(path/to/foo.css)    result[9] = path/to/foo.css\n                          result[4] || // 'path/to/foo.css'       result[4] = path/to/foo.css\n                          result[5];   // \"path/to/foo.css\"       result[5] = path/to/foo.css\n\n                url = _.trim(url);\n\n                if (isExternalURL(url)) {\n                    externalURLs.push(url);\n                    return;\n                }\n\n                var dirname = path.dirname(filename);\n                var pathname;\n                \n                // if the path starts with node_modules, search up the tree to find the module\n                // in case it was deduped to a higher location in the tree\n                if (isNodeModulePath(url)) {\n                    pathname = findImportPathInNodeModules(dirname, url);\n                } else if (isRelativePath(url)) { // relative path\n                    pathname = path.resolve(dirname, url);\n                } else { // absolute path\n                    pathname = path.join(rootDir, url);\n                }\n\n                if (that && typeof that.emit === 'function') {\n                    that.emit('file', pathname);\n                }\n\n                parseCSSFile(pathname);\n\n            } else {\n                if (rule.type === 'media') {\n                    // handle rules in media query\n                    _.each(rule.rules, processRule);\n                } else {\n                    // handle normal rules\n                    processRule(rule);\n                }\n\n                var cssText = css.stringify({\n                    stylesheet: {\n                        rules: [ rule ]\n                    }\n                });\n                cssStream.write(cssText + '\\n');\n            }\n        });\n    };\n\n    parseCSSFile(filename);\n\n    cssStream.end();\n};\n\nvar defaults = {\n    rebaseUrls: true,\n    rootDir: process.cwd(),\n    processRelativeUrl: null\n};\n\nmodule.exports = function(options, filename, callback) {\n    if (typeof options === 'string') {\n        callback = filename;\n        filename = options;\n        options = {};\n    }\n\n    if (typeof callback !== 'function') {\n        callback = function noop() {};\n    }\n\n    options = _.defaults(options || {}, defaults);\n\n    try {\n        cssTransform.call(this, options, filename, callback);\n    } catch(err) {\n        this.emit('error', err);\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-browserify-css/node_modules/browserify-css/browser.js":"'use strict';\n// For more information about browser field, check out the browser field at https://github.com/substack/browserify-handbook#browser-field.\n\nvar styleElementsInsertedAtTop = [];\n\nvar insertStyleElement = function(styleElement, options) {\n    var head = document.head || document.getElementsByTagName('head')[0];\n    var lastStyleElementInsertedAtTop = styleElementsInsertedAtTop[styleElementsInsertedAtTop.length - 1];\n\n    options = options || {};\n    options.insertAt = options.insertAt || 'bottom';\n\n    if (options.insertAt === 'top') {\n        if (!lastStyleElementInsertedAtTop) {\n            head.insertBefore(styleElement, head.firstChild);\n        } else if (lastStyleElementInsertedAtTop.nextSibling) {\n            head.insertBefore(styleElement, lastStyleElementInsertedAtTop.nextSibling);\n        } else {\n            head.appendChild(styleElement);\n        }\n        styleElementsInsertedAtTop.push(styleElement);\n    } else if (options.insertAt === 'bottom') {\n        head.appendChild(styleElement);\n    } else {\n        throw new Error('Invalid value for parameter \\'insertAt\\'. Must be \\'top\\' or \\'bottom\\'.');\n    }\n};\n\nmodule.exports = {\n    // Create a <link> tag with optional data attributes\n    createLink: function(href, attributes) {\n        var head = document.head || document.getElementsByTagName('head')[0];\n        var link = document.createElement('link');\n\n        link.href = href;\n        link.rel = 'stylesheet';\n\n        for (var key in attributes) {\n            if ( ! attributes.hasOwnProperty(key)) {\n                continue;\n            }\n            var value = attributes[key];\n            link.setAttribute('data-' + key, value);\n        }\n\n        head.appendChild(link);\n    },\n    // Create a <style> tag with optional data attributes\n    createStyle: function(cssText, attributes, extraOptions) {\n        extraOptions = extraOptions || {};\n\n        var style = document.createElement('style');\n        style.type = 'text/css';\n\n        for (var key in attributes) {\n            if ( ! attributes.hasOwnProperty(key)) {\n                continue;\n            }\n            var value = attributes[key];\n            style.setAttribute('data-' + key, value);\n        }\n\n        if (style.sheet) { // for jsdom and IE9+\n            style.innerHTML = cssText;\n            style.sheet.cssText = cssText;\n            insertStyleElement(style, { insertAt: extraOptions.insertAt });\n        } else if (style.styleSheet) { // for IE8 and below\n            insertStyleElement(style, { insertAt: extraOptions.insertAt });\n            style.styleSheet.cssText = cssText;\n        } else { // for Chrome, Firefox, and Safari\n            style.appendChild(document.createTextNode(cssText));\n            insertStyleElement(style, { insertAt: extraOptions.insertAt });\n        }\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-browserify-css/node_modules/browserify-css/gulpfile.js":"'use strict';\n\nvar _ = require('lodash');\nvar gulp = require('gulp');\nvar requireDir = require('require-dir');\n\n// Require all tasks in gulp/tasks, including subfolders\nvar tasks = requireDir('./gulp/tasks', {recursive: true});\n\n_.each(tasks, function(task, relativePath) {\n    console.assert(_.isFunction(task), 'gulp/tasks/%s: module\\'s export is not a function', relativePath);\n    task({\n        config: require('./gulp/config'),\n        errorHandler: require('./gulp/error-handler')\n    });\n});\n\ngulp.task('default', ['build']);\n","/home/travis/build/npmtest/node-npmtest-browserify-css/node_modules/browserify-css/config/jshint.js":"module.exports = {\n    /**\n     * Enforcing options\n     * When set to true, these options will make JSHint produce more warnings about your code.\n     */\n\n    // This option prohibits the use of bitwise operators such as ^ (XOR), | (OR) and others.\n    // Bitwise operators are very rare in JavaScript programs and quite often & is simply a mistyped &&.\n    bitwise: true,\n    // This option allows you to force all variable names to use either camelCase style or UPPER_CASE with underscores.\n    camelcase: true,\n    // This option requires you to always put curly braces around blocks in loops and conditionals. \n    curly: true,\n    // This options prohibits the use of == and != in favor of === and !==. \n    eqeqeq: true,\n    // This option tells JSHint that your code needs to adhere to ECMAScript 3 specification. \n    es3: true,\n    // This option requires all for in loops to filter object's items. \n    forin: true,\n    // This option prohibits the use of immediate function invocations without wrapping them in parentheses.\n    immed: true,\n    // This option enforces specific tab width for your code. For example, the following code will trigger a warning on line 4:\n    indent: 4,\n    // This option prohibits the use of a variable before it was defined.\n    latedef: true,\n    // This option requires you to capitalize names of constructor functions. \n    newcap: true,\n    // This option prohibits the use of arguments.caller and arguments.callee. \n    noarg: true,\n    // This option warns when you have an empty block in your code. \n    noempty: true,\n    // This option prohibits the use of constructor functions for side-effects.\n    nonew: true,\n    // This option prohibits the use of unary increment and decrement operators.\n    plusplus: true,\n    // This option enforces the consistency of quotation marks used throughout your code.\n    quotmark: true,\n    // This option prohibits the use of explicitly undeclared variables. \n    undef: true,\n    // This option warns when you define and never use your variables. \n    unused: true,\n    // This option requires all functions to run in ECMAScript 5's strict mode. \n    strict: true,\n    // This option makes it an error to leave a trailing whitespace in your code. \n    trailing: true,\n\n    /**\n     * Relaxing options\n     * When set to true, these options will make JSHint produce less warnings about your code.\n     */\n\n    // This option suppresses warnings about missing semicolons.\n    asi: false,\n    // This option suppresses warnings about the use of assignments in cases where comparisons are expected. \n    boss: false,\n    // This option suppresses warnings about the debugger statements in your code.\n    debug: false,\n    // This option suppresses warnings about == null comparisons. \n    eqnull: false,\n    // This option tells JSHint that your code uses ECMAScript 6 specific syntax.\n    esnext: false,\n    // This option suppresses warnings about the use of eval.\n    evil: false,\n    // This option suppresses warnings about the use of expressions where normally you would expect to see assignments or function calls. \n    expr: false,\n    // This option suppresses warnings about declaring variables inside of control structures while accessing them later from the outside. \n    funcscope: false,\n    // This option suppresses warnings about the use of global strict mode. \n    globalstrict: true,\n    // This option suppresses warnings about the __iterator__ property. \n    iterator: false,\n    // This option suppresses warnings about missing semicolons, but only when the semicolon is omitted for the last statement in a one-line block.\n    lastsemic: false,\n    // This option suppresses most of the warnings about possibly unsafe line breakings in your code.\n    laxbreak: false,\n    // This option suppresses warnings about comma-first coding style.\n    laxcomma: false,\n    // This option suppresses warnings about functions inside of loops.\n    loopfunc: false,\n    // This options tells JSHint that your code uses Mozilla JavaScript extensions.\n    moz: false,\n    // This option suppresses warnings about multi-line strings.\n    multistr: false,\n    // This option suppresses warnings about the __proto__ property.\n    proto: false,\n    // This option suppresses warnings about the use of script-targeted URLs—such as javascript:....\n    scripturl: false,\n    // This option suppresses warnings about mixed tabs and spaces when the latter are used for alignmnent only.\n    smarttabs: false,\n    // This option suppresses warnings about variable shadowing i.e. declaring a variable that had been already declared somewhere in the outer scope.\n    shadow: false,\n    // This option suppresses warnings about using [] notation when it can be expressed in dot notation\n    sub: true,\n    // This option suppresses warnings about \"weird\" constructions like new function () { ... } and new Object;. \n    supernew: false,\n    // This option suppresses warnings about possible strict violations when the code is running in strict mode and you use this in a non-constructor function. \n    validthis: false,\n\n\n    /**\n     * Environments\n     * These options let JSHint know about some pre-defined global variables.\n     */\n    browser: true,\n\n    globals: {\n        __dirname: true,\n        process: true,\n        exports: true,\n        module: true,\n        console: true,\n        define: true,\n        require: true,\n        JSON: true\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-browserify-css/node_modules/browserify-css/gulp/config.js":"var _ = require('lodash');\nvar fse = require('fs-extra');\nvar path = require('path');\nvar gutil = require('gulp-util');\nvar banner = [\n    '/**',\n    ' * <%= pkg.name %> - <%= pkg.description %>',\n    ' * <%= pkg.author %>',\n    ' * Version <%= pkg.version %>',\n    ' * <%= pkg.license %> Licensed',\n    ' */',\n    ''].join('\\n');\n\nmodule.exports = {\n    banner: banner,\n    clean: {\n        examples: [\n            'examples/submodules/bundle.js'\n        ]\n    },\n    jshint: {\n        src: [\n            '*.js',\n            '*.json',\n            'examples/**/*.js',\n            '!examples/**/bundle.js',\n            '!**/node_modules/**'\n        ],\n        options: require('../config/jshint')\n    },\n    bundles: {\n        submodules: {\n            src: './examples/submodules/index.js',\n            dest: './examples/submodules/',\n            options: {\n                debug: true\n            },\n            transform: {\n                'browserify-css': {\n                    'autoInject': true,\n                    'autoInjectOptions': {\n                        'verbose': true,\n                        'insertAt': 'bottom'\n                    },\n                    'rootDir': 'examples/submodules',\n                    'rebaseUrls': true,\n                    'minify': true,\n                    'processRelativeUrl': function(relativeUrl) {\n                        var stripQueryStringAndHashFromPath = function(url) {\n                            return url.split('?')[0].split('#')[0];\n                        };\n                        var rootDir = path.resolve(process.cwd(), 'examples/submodules');\n                        var relativePath = stripQueryStringAndHashFromPath(relativeUrl);\n                        var queryStringAndHash = relativeUrl.substring(relativePath.length);\n\n                        //\n                        // Copying files from '../node_modules/bootstrap/' to 'vendor/bootstrap/'\n                        //\n                        var prefix = '../node_modules/';\n                        if (_.startsWith(relativePath, prefix)) {\n                            var newUrl = 'vendor/' + relativePath.substring(prefix.length);\n                            var source = path.join(rootDir, relativePath);\n                            var target = path.join(rootDir, newUrl);\n\n                            gutil.log('Copying file from ' + JSON.stringify(source) + ' to ' + JSON.stringify(target));\n                            fse.copySync(source, target);\n\n                            // Returns a new url with original query string and hash fragments\n                            return newUrl + queryStringAndHash;\n                        }\n\n                        return relativeUrl;\n                    }\n                }\n            }\n        }\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-browserify-css/node_modules/browserify-css/gulp/error-handler.js":"// \n// Error handling in gulp \n//\n// http://www.artandlogic.com/blog/2014/05/error-handling-in-gulp/\n// https://github.com/ethanmuller/gulp-init/blob/master/error-handler.coffee\n\nvar gutil = require('gulp-util');\n\n// Command line option:\n//  --fatal=[warning|error|off]\nvar fatalLevel = require('yargs').argv.fatal;\n\nvar ERROR_LEVELS = [\n    'error',\n    'warning'\n];\n\nvar ERROR_COLORS = {\n    warning: gutil.colors.yellow,\n    error: gutil.colors.red\n};\n\nvar ERROR_EMOTES = {\n    warning: [\n        '¯\\\\_(ツ)_/¯',\n        '(╯︵╰,)',\n        '(ಠ_ಠ)'\n    ],\n    error: [\n        '(╯°□°）╯︵ ┻━┻',\n        '┻━┻  ︵ \\\\(°□°)/ ︵ ┻━┻',\n        'ლ (ಠ益ಠ)ლ'\n    ]\n};\n\n// If the fatalLevel is 'off', then this will always return false.\n// Defaults the fatalLevel to 'error'.\nvar isFatal = function(level) {\n    var errorLevels = [\n        'error',\n        'warning'\n    ];\n    return ERROR_LEVELS.indexOf(level) <= ERROR_LEVELS.indexOf(fatalLevel || 'error');\n};\n\n// Handle an error based on its severity level.\n// Log all levels, and exit the process for fatal levels.\nvar handleError = function(level, error) {\n    var emotes = ERROR_EMOTES[level];\n    var color = ERROR_COLORS[level];\n    var msg = color(level.toUpperCase()) + ' triggered by ' + gutil.colors.magenta(error.plugin);\n    var randomEmote = emotes[Math.floor(Math.random()*emotes.length)];\n\n    gutil.beep();\n    gutil.log(msg);\n    gutil.log(color(randomEmote));\n    gutil.log(color(error.message));\n    if (isFatal(level)) {\n        process.exit(1);\n    }\n};\n\nmodule.exports = {\n    // Convenience handler for error-level errors.\n    error: function(error) {\n        handleError.call(this, 'error', error);\n        this.emit('end');\n    },\n    // Convenience handler for warning-level errors.\n    warning: function(error) {\n        handleError.call(this, 'warning', error);\n        this.emit('end');\n    }\n};\n","/home/travis/build/npmtest/node-npmtest-browserify-css/node_modules/browserify-css/gulp/tasks/bundles.js":"var _ = require('lodash');\nvar gulp = require('gulp');\nvar path = require('path');\nvar browserify = require('browserify');\nvar sourceStream = require('vinyl-source-stream');\nvar exorcist = require('exorcist');\n\nmodule.exports = function(options) {\n    var tasks = [];\n\n    _.each(options.config.bundles, function(bundleConfig, key) {\n        var task = 'bundle:' + key;\n\n        gulp.task(task, function() {\n            var bundleTransform = bundleConfig.transform;\n            var bundleFile = 'bundle.js';\n            var bundleMapFile = path.join(bundleConfig.dest, 'bundle.js.map');\n\n            return browserify(bundleConfig.options)\n                .add(bundleConfig.src)\n                .transform(require('../../index'), bundleTransform['browserify-css'])\n                .require('./browser', {expose: 'browserify-css'})\n                .bundle()\n                .pipe(exorcist(bundleMapFile))\n                .pipe(sourceStream(bundleFile))\n                .pipe(gulp.dest(bundleConfig.dest));\n        });\n\n        tasks.push(task);\n    });\n\n    gulp.task('bundles', tasks);\n};\n","/home/travis/build/npmtest/node-npmtest-browserify-css/node_modules/browserify-css/gulp/tasks/clean.js":"var gulp = require('gulp');\nvar del = require('del');\n\nmodule.exports = function(options) {\n    /**\n     * Delete folder and files\n     */\n    gulp.task('clean', function(callback) {\n        var cleanConfig = options.config.clean;\n        del(cleanConfig.examples, callback);\n    });\n};\n"}